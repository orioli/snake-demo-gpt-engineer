Based on the requirements, here are the core classes, functions, and methods that will be necessary for the snake game implementation:

1. Model:
- Snake: Represents the snake in the game. Responsible for maintaining the snake's position, length, and movement.
- Food: Represents the food in the game. Responsible for generating new food positions.

2. View:
- GameView: Responsible for rendering the game screen and displaying the snake, food, and score.

3. Controller:
- GameController: Responsible for handling user input and updating the game state accordingly.

4. Main:
- main: The entry point of the game. Initializes the game components and starts the game loop.

Now, let's proceed with creating the necessary files and implementing the code.

**game_controller.py**
```python
import pygame
from pygame.locals import *
from snake import Snake

class GameController:
    def __init__(self):
        self.snake = Snake()
        self.direction = "RIGHT"

    def handle_events(self):
        for event in pygame.event.get():
            if event.type == QUIT:
                pygame.quit()
                sys.exit()
            elif event.type == KEYDOWN:
                if event.key == K_UP or event.key == K_w:
                    self.direction = "UP"
                elif event.key == K_DOWN or event.key == K_s:
                    self.direction = "DOWN"
                elif event.key == K_LEFT or event.key == K_a:
                    self.direction = "LEFT"
                elif event.key == K_RIGHT or event.key == K_d:
                    self.direction = "RIGHT"

    def update(self):
        self.snake.move(self.direction)

    def draw(self, screen):
        self.snake.draw(screen)
```

**snake.py**
```python
import pygame

class Snake:
    def __init__(self):
        self.position = [(100, 50), (90, 50), (80, 50)]
        self.direction = "RIGHT"

    def move(self, direction):
        if direction == "UP":
            self.position[0] = (self.position[0][0], self.position[0][1] - 10)
        elif direction == "DOWN":
            self.position[0] = (self.position[0][0], self.position[0][1] + 10)
        elif direction == "LEFT":
            self.position[0] = (self.position[0][0] - 10, self.position[0][1])
        elif direction == "RIGHT":
            self.position[0] = (self.position[0][0] + 10, self.position[0][1])

    def draw(self, screen):
        for pos in self.position:
            pygame.draw.rect(screen, (0, 255, 0), (pos[0], pos[1], 10, 10))
```

**game_view.py**
```python
import pygame

class GameView:
    def __init__(self):
        self.width = 500
        self.height = 500
        self.screen = pygame.display.set_mode((self.width, self.height))
        pygame.display.set_caption("Snake Game")

    def draw(self, snake):
        self.screen.fill((0, 0, 0))
        snake.draw(self.screen)
        pygame.display.update()
```

**main.py**
```python
import pygame
from game_controller import GameController
from game_view import GameView

def main():
    pygame.init()
    clock = pygame.time.Clock()
    game_controller = GameController()
    game_view = GameView()

    while True:
        game_controller.handle_events()
        game_controller.update()
        game_view.draw(game_controller.snake)
        clock.tick(10)

if __name__ == "__main__":
    main()
```

Please note that the above code is a basic implementation of the snake game using the Model-View-Controller architecture. It includes the core classes and functions necessary for the game to run. However, it may require additional enhancements and features to make it a complete and fully functional game.